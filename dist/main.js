(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>c});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"* {\n    margin: 0px;\n    padding: 0px;   \n}\n\n.content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.add-project-header {\n    font-size: 36px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n}\n\n#add-project-button {\n    margin-bottom: 20px;\n}\n\n.add-project-modal {\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: rgba(255, 255, 255, 0.7);\n    transition: all 0.4s;\n    visibility: hidden;\n    opacity: 0;\n}\n\n.add-project-modal-content {\n    position: absolute;\n    background: lightcyan;\n    width: 400px;\n    height: 400px;\n    padding: 1em 2em;\n    border-radius: 10px;\n}\n\n#add-project-popup:target {\n    visibility: visible;\n    opacity: 1;\n}\n\n.add-list-popup {\n    display: none;\n}\n\n#add-project-form {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 150px;\n}\n\n#add-project-title-input {\n    height: 75px;\n    width: 350px;\n    font-size: 32px;\n    padding-left: 15px;\n}\n\n#add-project-submit-button {\n    height: 50px;\n    width: 200px;\n    font-size: 30px;\n}\n\n.project-container {\n    border: 2px solid black;\n    display: grid;\n    justify-content: center;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 400px));\n}\n\n.project-item-container {\n    font-size: 25px;\n    border: 2px solid yellow;\n}\n\n.project-item-list {\n    border: 2px solid green;\n    font-size: 20px;\n}\n\n/**Setting relative position allows other elements, e.g. our add-list-item, to be set via absolute*/\n.projects {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    border: 2px solid blue;\n    height: 250px;\n}\n\n.project-title {\n    text-align: center;\n    font-size: 36px;\n    margin-bottom: 10px;\n}\n\n.project-item-array {\n    font-size: 22px;\n}\n\n#project-list-item {\n    margin-bottom: 10px;\n}\n\n#add-list-item {\n    position: absolute;\n    bottom: 10px;\n    right: 10px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,0CAA0C;IAC1C,oBAAoB;IACpB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,uBAAuB;IACvB,6DAA6D;AACjE;;AAEA;IACI,eAAe;IACf,wBAAwB;AAC5B;;AAEA;IACI,uBAAuB;IACvB,eAAe;AACnB;;AAEA,mGAAmG;AACnG;IACI,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,WAAW;AACf",sourcesContent:["* {\r\n    margin: 0px;\r\n    padding: 0px;   \r\n}\r\n\r\n.content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.add-project-header {\r\n    font-size: 36px;\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n#add-project-button {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.add-project-modal {\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    transition: all 0.4s;\r\n    visibility: hidden;\r\n    opacity: 0;\r\n}\r\n\r\n.add-project-modal-content {\r\n    position: absolute;\r\n    background: lightcyan;\r\n    width: 400px;\r\n    height: 400px;\r\n    padding: 1em 2em;\r\n    border-radius: 10px;\r\n}\r\n\r\n#add-project-popup:target {\r\n    visibility: visible;\r\n    opacity: 1;\r\n}\r\n\r\n.add-list-popup {\r\n    display: none;\r\n}\r\n\r\n#add-project-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 150px;\r\n}\r\n\r\n#add-project-title-input {\r\n    height: 75px;\r\n    width: 350px;\r\n    font-size: 32px;\r\n    padding-left: 15px;\r\n}\r\n\r\n#add-project-submit-button {\r\n    height: 50px;\r\n    width: 200px;\r\n    font-size: 30px;\r\n}\r\n\r\n.project-container {\r\n    border: 2px solid black;\r\n    display: grid;\r\n    justify-content: center;\r\n    grid-template-columns: repeat(auto-fit, minmax(300px, 400px));\r\n}\r\n\r\n.project-item-container {\r\n    font-size: 25px;\r\n    border: 2px solid yellow;\r\n}\r\n\r\n.project-item-list {\r\n    border: 2px solid green;\r\n    font-size: 20px;\r\n}\r\n\r\n/**Setting relative position allows other elements, e.g. our add-list-item, to be set via absolute*/\r\n.projects {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: 2px solid blue;\r\n    height: 250px;\r\n}\r\n\r\n.project-title {\r\n    text-align: center;\r\n    font-size: 36px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.project-item-array {\r\n    font-size: 22px;\r\n}\r\n\r\n#project-list-item {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n#add-list-item {\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 10px;\r\n}"],sourceRoot:""}]);const c=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(a[d]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],c=0;c<t.length;c++){var d=t[c],s=r.base?d[0]+r.base:d[0],l=i[s]||0,p="".concat(s," ").concat(l);i[s]=l+1;var A=n(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(u);else{var m=o(u,r);r.byIndex=c,e.splice(c,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var c=n(i[a]);e[c].references--}for(var d=r(t,o),s=0;s<i.length;s++){var l=n(i[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=d}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{function t(){let t=[];for(let e=0;e<localStorage.length;e++)localStorage.key(e).includes("project-")&&t.push(localStorage.getItem(localStorage.key(e)));return t}class e{constructor(t,e){this.title=t,this.lists=e}}class r{constructor(t,e,n,r,o){this.title=t,this.description=e,this.dueDate=n,this.priority=r,this.isCompleted=o}}const o=document.querySelector(".content"),i=()=>{const t=document.createElement("form");t.setAttribute("id","add-project-form");const e=document.createElement("input");e.id="add-project-title-input",e.type="text",e.minLength="1",e.maxLength="40",e.placeholder="Title",e.required="true";const n=document.createElement("button");return n.setAttribute("id","add-project-submit-button"),n.setAttribute("form","add-project-form"),n.type="submit",n.innerText="Submit",t.appendChild(e),t.appendChild(n),t},a=()=>{const t=document.createElement("form");t.setAttribute("id","add-list-form");const e=document.createElement("input");e.id="add-list-title-input",e.type="text",e.minLength="1",e.maxLength="20",e.placeholder="Title",e.required="true";const n=document.createElement("input");n.id="add-list-desc-input",n.type="text",n.minLength="1",n.maxLength="40",n.placeholder="Description",n.required="true";const r=document.createElement("input");r.id="add-list-due-date",r.type="text";const o=document.createElement("select");o.setAttribute("id","priority-selector");const i=document.createElement("option"),a=document.createElement("option"),c=document.createElement("option");i.setAttribute("id","low-priority"),a.setAttribute("id","normal-priority"),c.setAttribute("id","high-priority"),i.innerText="Low",a.innerText="Normal",c.innerText="High",o.appendChild(i),o.appendChild(a),o.appendChild(c);const d=document.createElement("button");return d.setAttribute("id","add-list-submit-button"),d.setAttribute("form","add-list-form"),d.type="submit",d.innerText="Submit",t.appendChild(e),t.appendChild(n),t.appendChild(r),t.appendChild(o),t.appendChild(d),t};function c(){const e=document.querySelector(".project-container"),n=t();for(let t=0;t<n.length;t++){const r=document.createElement("div");r.classList.add("projects");const o=document.createElement("button");o.setAttribute("id","add-list-button"),o.innerHTML="<img src='../src/images/pencil.svg'/>",o.style.width="30px",o.style.backgroundColor="white";const i=document.createElement("div"),a=document.createElement("div");i.classList.add("project-title"),a.classList.add("project-item-array");const c=JSON.parse(n[t]);i.innerText=c.title,r.appendChild(i);const d=c.lists;for(let t=0;t<d.length;t++){const e=document.createElement("div");e.classList.add("project-item-container");const n=document.createElement("p");n.innerText=d[t].title,e.appendChild(n),r.appendChild(e)}r.appendChild(o),e.appendChild(r)}}var d=n(379),s=n.n(d),l=n(795),p=n.n(l),A=n(569),u=n.n(A),m=n(565),f=n.n(m),g=n(216),h=n.n(g),C=n(589),x=n.n(C),b=n(426),v={};v.styleTagTransform=x(),v.setAttributes=f(),v.insert=u().bind(null,"head"),v.domAPI=p(),v.insertStyleElement=h(),s()(b.Z,v),b.Z&&b.Z.locals&&b.Z.locals,function(){localStorage.clear();const t=new r("first title","first desc","due now","normal",!1),n=new r("second title","second desc","due later","low",!1),o=new e("Test Project",[t,n]);localStorage.setItem("project-1",JSON.stringify(o)),console.log(o)}(),o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("add-project-header"),e.innerText=t,e})("Add a project!")),o.appendChild((()=>{const t=document.createElement("button");return t.setAttribute("id","add-project-button"),t.innerHTML="<img src='../src/images/plus-circle.svg'/>",t.style.width="100px",t.style.backgroundColor="white",t})()),o.appendChild((()=>{const t=document.createElement("div");t.classList.add("add-project-modal"),t.setAttribute("id","add-project-popup");const e=document.createElement("div");return e.classList.add("add-project-modal-content"),t.appendChild(e),e.appendChild(i()),t})()),o.appendChild((()=>{const t=document.createElement("div");return t.classList.add("add-list-popup"),t.appendChild(a()),t})()),o.appendChild((()=>{const t=document.createElement("div");return t.classList.add("project-container"),t})()),c(),document.querySelector("#add-project-button").addEventListener("click",(()=>{console.log("add project clicked"),console.log(document.querySelector("#add-project-popup")),window.open("#add-project-popup")})),document.querySelector("#add-list-submit-button").addEventListener("click",(n=>{n.preventDefault(),function(){const n=t().length,r=document.querySelector("#add-project-title-input"),o=new e(r.value,JSON.stringify([""]));localStorage.setItem("project-"+n,JSON.stringify(o))}(),document.querySelectorAll(".projects").forEach((t=>{t.remove()})),c()})),(()=>{const t=document.querySelector("#add-list-button");document.querySelector(".add-list-popup"),null!==t&&t.addEventListener("click",(()=>{}))})(),(()=>{const e=document.querySelectorAll("#add-project-submit-button");e.forEach((function(n,o){e[o].addEventListener("click",(e=>{e.preventDefault(),function(e){const n=t()[e],o=(localStorage.getItem(localStorage.key(n)),document.querySelector("#add-list-title-input")),i=document.querySelector("#add-list-desc-input"),a=document.querySelector("#add-list-due-date"),c=document.querySelector("#priority-selector"),d=c.options[c.selectedIndex].text;new r(o.value,i.value,a.value,d,!1),localStorage.setItem("project-"+projectIndex,JSON.stringify(convertedProject))}(o)}))}))})(),document.addEventListener("click",(t=>{t.target.closest(".add-project-modal-content")||window.open("#","_parent")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,